//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""e04b497b-ee17-4a1a-85f2-950c46c5e94b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""970fd6d6-5dca-444b-aa95-616e4d63dd2e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CamMove"",
                    ""type"": ""Value"",
                    ""id"": ""b4b5b9c7-5a93-41b3-a750-309c9324bed9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1971ef7a-6528-4839-a24b-af7a8ba1c096"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""998dddb2-3a18-4160-a0ba-37d51978ade0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58537b1b-6d86-43c6-98a6-bb549b825a34"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ec3c14cf-6b33-4cfd-989a-63760afd34c9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""15bffe61-a573-4af5-bb4a-21ececcff596"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""40e266dc-f83f-44cc-9a85-71427fe7bb89"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1dbf3347-9a00-4745-ad2c-e52f2a21fdb5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b7fa1e41-481a-44f1-8f25-c3c4af871421"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9689990e-ea66-4fbb-a249-6ca860ad1c12"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4712eb39-e4a8-4a3f-acb5-5fae5400b98d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ab0fc30-e8eb-4a5f-9783-f31676be3779"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""508e2ff9-9da3-44a4-b5c0-580512e291e2"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42305476-ebe4-4d19-8aad-c64e18e288d1"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5177de5a-9ad2-46ae-ba21-4b10ef7c8ffa"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""82b0e02e-896d-450d-b699-ecbdb8a65e43"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""05e055ba-0fb9-484e-94fa-7462f9dabcfc"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8482d5b2-d95f-4e5d-897c-da2aad9911f0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""922841d3-d421-45ef-9fe3-a15de61ac752"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""293948aa-25bb-4c5b-a45f-e8a4621cd02c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CamMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""SummonClone"",
            ""id"": ""bbc6c3f2-d607-4eb2-99fd-0cecae19451c"",
            ""actions"": [
                {
                    ""name"": ""SummonAClone"",
                    ""type"": ""Button"",
                    ""id"": ""b47245b7-7c97-4efa-824b-15b350482538"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitClone"",
                    ""type"": ""Button"",
                    ""id"": ""51bf1880-6f7c-45f3-95ff-795a4aa0975a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchPlaces"",
                    ""type"": ""Button"",
                    ""id"": ""1a910fba-8948-4d7a-bf70-ac9b8d82eb93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a491595f-d6d6-4175-8c0a-9d8ed7293972"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SummonAClone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e26a3248-314e-43fa-9b6e-44ec44441afb"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SummonAClone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5afeecf5-7b4f-4c16-acc4-f73d943f9d3a"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ExitClone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f09fbe0-ab2d-4d0a-9494-a1f97996bb56"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ExitClone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6418500-4128-41a3-9de9-929c42a69c1a"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SwitchPlaces"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8603aad-e67b-4a7e-883c-d96e6324ccd1"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SwitchPlaces"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenu"",
            ""id"": ""0e5b5e9c-05c9-4d6f-9163-184dbc39e3a7"",
            ""actions"": [
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""32c4207e-b0f6-46a1-b93e-07cfd3a23ce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e3f81ea7-b382-4c97-a67c-bdaea04b41ca"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50a888dd-334f-4da4-a3be-725d790d7e6c"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Grapple"",
            ""id"": ""7d6cb877-56dc-4baa-bb17-7bb236aa586a"",
            ""actions"": [
                {
                    ""name"": ""ShootHook"",
                    ""type"": ""Button"",
                    ""id"": ""d8fe9231-f463-4da0-afac-847d15a63dd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelHook"",
                    ""type"": ""Button"",
                    ""id"": ""5d6c3782-5563-4d9a-921c-f027647a9caf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d13403ba-52e8-42d9-93f1-467b72b4a8e2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ShootHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c87cb85-8e1c-4d5c-864b-617008bbcd7b"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ShootHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c91f6ab7-e094-429b-9764-12a55c42223d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CancelHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc941a43-8eec-40e3-95d7-d2441862c689"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""CancelHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90c86428-12d6-4fa3-af2a-d07a4221179a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CancelHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Push"",
            ""id"": ""cab184f3-6cc4-4c29-9dbb-045a557e2b46"",
            ""actions"": [
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""a0913a19-c5f3-48a5-bb17-1e76467c5eaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d161618-a1fc-4297-87da-a4e1e2697c51"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86617339-653a-401a-800f-020af9f50db2"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""5773e0cf-4322-4bce-9512-ca7c8cda8578"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""916635f9-c96f-4408-adad-710af085a2be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b50ea658-4d19-440e-b669-21473f22a0f9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f7d96a9-6089-4eb9-af33-42005ee9d691"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""cd282b85-df74-45b5-be42-c4317f1656a6"",
            ""actions"": [
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""d480cade-cf9e-491b-bb4b-38cf7a297a93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e6908be3-402b-42d4-846d-9bbab1e4b7cd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e2cb8cb-9053-44e6-a507-36b5c84e9200"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Checkpoint"",
            ""id"": ""c8e67eba-cf61-4780-9e96-bd373b1f934f"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""0056067d-d802-43a4-8bb5-6b513a43178f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""47f14cec-ff6e-4788-965d-b7a05f5b1b1c"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cheat"",
            ""id"": ""aa32ae28-3184-4703-8e2c-994370aac848"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""18087739-7811-4182-8f72-15076eecd191"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""History"",
                    ""type"": ""Value"",
                    ""id"": ""5c17fc59-0217-438e-af87-7a624d1bc5cd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""65abaaff-35ce-4aca-9b18-328d9ebb1994"",
                    ""path"": ""<Keyboard>/backslash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7657062-8f2f-47cf-a4c4-b7cbe57cd683"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9109b364-48a4-4905-89b9-69093524f34a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""History"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e9190506-d4a6-42dc-a6b0-69442ab42a8a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""History"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3a5d0860-1d12-4d9c-a362-555de63ead25"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""History"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Cutscene"",
            ""id"": ""f2f6447e-4041-4154-8c96-779c669308e1"",
            ""actions"": [
                {
                    ""name"": ""SkipCutscene"",
                    ""type"": ""Button"",
                    ""id"": ""a82d3cbb-c478-4649-b438-6e50ce252938"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ef0f914-fa2b-4574-8fcc-f06feb220e5b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SkipCutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5a16131-7d92-4ea4-98bf-929cdcf913fc"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SkipCutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""42865fda-5b00-4804-bcf7-aa601c31925f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""50693934-d863-4d9f-b83c-0a226f5cf6c9"",
                    ""expectedControlType"": ""Double"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AltMove"",
                    ""type"": ""Value"",
                    ""id"": ""85dd397d-6a80-476a-9735-dce8fb99c6b8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""b109e724-06d3-4f79-aa28-1f698de4e3d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""cf2effda-5bc7-4b15-8a41-9eeeec84ce7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac0f73a5-d16b-4f3e-9145-3caf4ca8d555"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4f819e3-a9b1-48ab-a3b1-63c1483358f8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca6d0519-50f6-4071-8ce4-5c1dbf7d7841"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f8a7df3-1070-4b21-9d63-d6e8e00c3993"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""48189c6c-599f-43ea-babc-7710237200f4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c35f59c4-8be2-4949-8b3d-14fa0c425265"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d275cd72-fcfe-4b6f-b4fa-e025e7265b5e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e2b06822-83ad-4190-9a58-9df886b49e50"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""297e891d-5829-42b9-9cb7-57947c69d60e"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7971ebe3-5d29-4435-b83a-6c36be265adf"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5d288579-dd15-4130-b3c2-d2d92cac029a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e09e6ca9-fcda-4f1e-a63a-cc526230a3a0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""776ee66f-ee81-4cce-af2f-367b7def5849"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6f3e5245-df1f-48cc-ba9e-77ae89199d75"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AltMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d49f6200-ae6d-4164-8c85-6ae8cace0c2d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AltMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4c7faccd-acd8-4027-95b7-3d664b8ca96d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AltMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fde68f14-d916-4490-82e7-120516850563"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AltMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a89354f7-bed5-4621-bd3e-88a1317f78a1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AltMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""df8b810a-b29c-434d-81ce-f74c64311c29"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AltMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Scenes"",
            ""id"": ""8379664d-373e-4316-97a0-0aabe99b24e9"",
            ""actions"": [
                {
                    ""name"": ""DenialScene"",
                    ""type"": ""Button"",
                    ""id"": ""54befe8e-dee2-49b8-83b5-a00f3b2bc31f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HubScene"",
                    ""type"": ""Button"",
                    ""id"": ""c73906e9-7657-49f8-824a-cca27128e9f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DepressionScene"",
                    ""type"": ""Button"",
                    ""id"": ""f07250f8-716e-44db-a48e-a4dc75edfbca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BargainingScene"",
                    ""type"": ""Button"",
                    ""id"": ""0ea02045-b826-417a-9d19-cd80c8cc2e56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AngerScene"",
                    ""type"": ""Button"",
                    ""id"": ""c65b2815-e064-4aaf-9b9e-cef792f316cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MuseumScene"",
                    ""type"": ""Button"",
                    ""id"": ""ff2cf89d-9aa7-481f-9f48-71c2ddf39c47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AcceptanceScene"",
                    ""type"": ""Button"",
                    ""id"": ""3df64762-cd97-4f45-a7e9-d29ca282f0fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraScene"",
                    ""type"": ""Button"",
                    ""id"": ""6ff967f6-e516-4478-9be7-7f97ff370aab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseGame"",
                    ""type"": ""Button"",
                    ""id"": ""94f6e691-eb76-4e9f-aade-babbe24e5816"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f3a79e4a-8828-4332-909f-8ca6f7b79f0c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""DenialScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2927d436-03c7-4997-bb56-93782c26f282"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AngerScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23c5203d-f4ca-426e-843b-33e4e7540f0f"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""DepressionScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cf15228-9880-43f8-961b-bf0136cf8718"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""BargainingScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""246cb10d-8643-4704-858a-de40dcb040e6"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""HubScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a9cecf9-18c4-4d25-a958-ec01037afc7b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CloseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ghost"",
            ""id"": ""b6a5b962-b838-4bc7-b2d1-e19e1ad08c9d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8a2029c3-6b10-4b0b-83cf-3d038d3e31f1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""e633966b-c5ea-470b-b731-ff0b1db75243"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""8da92ba9-9133-4063-a907-cab4d2d52307"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""c8473abd-b324-42be-83ca-131addb25e70"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""a782a6d4-329c-492e-b816-50d84a565678"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sensitivity"",
                    ""type"": ""Button"",
                    ""id"": ""12ed0a89-1b70-4a82-accb-41c55d97e2e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9bcb0e68-c2b6-4769-8d88-762c67871438"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""aa8f399f-9ae5-4747-9bde-f16ea073cd95"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""651f98a4-915e-4733-bc2e-eaadcfe824b4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""043a791c-5172-48db-b619-c35dc31d3e4b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f148ade9-97ee-4911-865a-45da9258d7b0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a6ffe074-c604-45a9-bf3d-000eaf428910"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""572efc94-78e7-45a9-8057-b13d2054d732"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75382391-5aff-4653-83d5-ff69df5aeed3"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""670970cd-2a3d-4655-8ff3-0a6152605265"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56196eee-1c24-468b-b9c9-f81e2b11d985"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7200b13e-1914-4307-a75a-e56061243409"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4cf3fec-afef-4daf-bd15-c11ba755602d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ada852d6-895e-4e0e-813b-d2de853bfc03"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""[ ]"",
                    ""id"": ""cbc31170-97f3-4eaa-baab-56e275e8015d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sensitivity"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2ba2e1da-43bc-49ad-8da9-289fda2f8a3b"",
                    ""path"": ""<Keyboard>/leftBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sensitivity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""10dbe719-faae-4bc0-a998-9cf3c038bd57"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sensitivity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_CamMove = m_Movement.FindAction("CamMove", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Dash = m_Movement.FindAction("Dash", throwIfNotFound: true);
        // SummonClone
        m_SummonClone = asset.FindActionMap("SummonClone", throwIfNotFound: true);
        m_SummonClone_SummonAClone = m_SummonClone.FindAction("SummonAClone", throwIfNotFound: true);
        m_SummonClone_ExitClone = m_SummonClone.FindAction("ExitClone", throwIfNotFound: true);
        m_SummonClone_SwitchPlaces = m_SummonClone.FindAction("SwitchPlaces", throwIfNotFound: true);
        // PauseMenu
        m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
        m_PauseMenu_PauseGame = m_PauseMenu.FindAction("PauseGame", throwIfNotFound: true);
        // Grapple
        m_Grapple = asset.FindActionMap("Grapple", throwIfNotFound: true);
        m_Grapple_ShootHook = m_Grapple.FindAction("ShootHook", throwIfNotFound: true);
        m_Grapple_CancelHook = m_Grapple.FindAction("CancelHook", throwIfNotFound: true);
        // Push
        m_Push = asset.FindActionMap("Push", throwIfNotFound: true);
        m_Push_Push = m_Push.FindAction("Push", throwIfNotFound: true);
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Press = m_Interaction.FindAction("Press", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Exit = m_Camera.FindAction("Exit", throwIfNotFound: true);
        // Checkpoint
        m_Checkpoint = asset.FindActionMap("Checkpoint", throwIfNotFound: true);
        m_Checkpoint_Restart = m_Checkpoint.FindAction("Restart", throwIfNotFound: true);
        // Cheat
        m_Cheat = asset.FindActionMap("Cheat", throwIfNotFound: true);
        m_Cheat_Toggle = m_Cheat.FindAction("Toggle", throwIfNotFound: true);
        m_Cheat_History = m_Cheat.FindAction("History", throwIfNotFound: true);
        // Cutscene
        m_Cutscene = asset.FindActionMap("Cutscene", throwIfNotFound: true);
        m_Cutscene_SkipCutscene = m_Cutscene.FindAction("SkipCutscene", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Move = m_Menu.FindAction("Move", throwIfNotFound: true);
        m_Menu_AltMove = m_Menu.FindAction("AltMove", throwIfNotFound: true);
        m_Menu_Press = m_Menu.FindAction("Press", throwIfNotFound: true);
        m_Menu_Back = m_Menu.FindAction("Back", throwIfNotFound: true);
        // Scenes
        m_Scenes = asset.FindActionMap("Scenes", throwIfNotFound: true);
        m_Scenes_DenialScene = m_Scenes.FindAction("DenialScene", throwIfNotFound: true);
        m_Scenes_HubScene = m_Scenes.FindAction("HubScene", throwIfNotFound: true);
        m_Scenes_DepressionScene = m_Scenes.FindAction("DepressionScene", throwIfNotFound: true);
        m_Scenes_BargainingScene = m_Scenes.FindAction("BargainingScene", throwIfNotFound: true);
        m_Scenes_AngerScene = m_Scenes.FindAction("AngerScene", throwIfNotFound: true);
        m_Scenes_MuseumScene = m_Scenes.FindAction("MuseumScene", throwIfNotFound: true);
        m_Scenes_AcceptanceScene = m_Scenes.FindAction("AcceptanceScene", throwIfNotFound: true);
        m_Scenes_CameraScene = m_Scenes.FindAction("CameraScene", throwIfNotFound: true);
        m_Scenes_CloseGame = m_Scenes.FindAction("CloseGame", throwIfNotFound: true);
        // Ghost
        m_Ghost = asset.FindActionMap("Ghost", throwIfNotFound: true);
        m_Ghost_Move = m_Ghost.FindAction("Move", throwIfNotFound: true);
        m_Ghost_Up = m_Ghost.FindAction("Up", throwIfNotFound: true);
        m_Ghost_Down = m_Ghost.FindAction("Down", throwIfNotFound: true);
        m_Ghost_Camera = m_Ghost.FindAction("Camera", throwIfNotFound: true);
        m_Ghost_Sprint = m_Ghost.FindAction("Sprint", throwIfNotFound: true);
        m_Ghost_Sensitivity = m_Ghost.FindAction("Sensitivity", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_CamMove;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Dash;
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @CamMove => m_Wrapper.m_Movement_CamMove;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Dash => m_Wrapper.m_Movement_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @CamMove.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnCamMove;
                @CamMove.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnCamMove;
                @CamMove.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnCamMove;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Dash.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @CamMove.started += instance.OnCamMove;
                @CamMove.performed += instance.OnCamMove;
                @CamMove.canceled += instance.OnCamMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // SummonClone
    private readonly InputActionMap m_SummonClone;
    private ISummonCloneActions m_SummonCloneActionsCallbackInterface;
    private readonly InputAction m_SummonClone_SummonAClone;
    private readonly InputAction m_SummonClone_ExitClone;
    private readonly InputAction m_SummonClone_SwitchPlaces;
    public struct SummonCloneActions
    {
        private @PlayerControls m_Wrapper;
        public SummonCloneActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SummonAClone => m_Wrapper.m_SummonClone_SummonAClone;
        public InputAction @ExitClone => m_Wrapper.m_SummonClone_ExitClone;
        public InputAction @SwitchPlaces => m_Wrapper.m_SummonClone_SwitchPlaces;
        public InputActionMap Get() { return m_Wrapper.m_SummonClone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SummonCloneActions set) { return set.Get(); }
        public void SetCallbacks(ISummonCloneActions instance)
        {
            if (m_Wrapper.m_SummonCloneActionsCallbackInterface != null)
            {
                @SummonAClone.started -= m_Wrapper.m_SummonCloneActionsCallbackInterface.OnSummonAClone;
                @SummonAClone.performed -= m_Wrapper.m_SummonCloneActionsCallbackInterface.OnSummonAClone;
                @SummonAClone.canceled -= m_Wrapper.m_SummonCloneActionsCallbackInterface.OnSummonAClone;
                @ExitClone.started -= m_Wrapper.m_SummonCloneActionsCallbackInterface.OnExitClone;
                @ExitClone.performed -= m_Wrapper.m_SummonCloneActionsCallbackInterface.OnExitClone;
                @ExitClone.canceled -= m_Wrapper.m_SummonCloneActionsCallbackInterface.OnExitClone;
                @SwitchPlaces.started -= m_Wrapper.m_SummonCloneActionsCallbackInterface.OnSwitchPlaces;
                @SwitchPlaces.performed -= m_Wrapper.m_SummonCloneActionsCallbackInterface.OnSwitchPlaces;
                @SwitchPlaces.canceled -= m_Wrapper.m_SummonCloneActionsCallbackInterface.OnSwitchPlaces;
            }
            m_Wrapper.m_SummonCloneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SummonAClone.started += instance.OnSummonAClone;
                @SummonAClone.performed += instance.OnSummonAClone;
                @SummonAClone.canceled += instance.OnSummonAClone;
                @ExitClone.started += instance.OnExitClone;
                @ExitClone.performed += instance.OnExitClone;
                @ExitClone.canceled += instance.OnExitClone;
                @SwitchPlaces.started += instance.OnSwitchPlaces;
                @SwitchPlaces.performed += instance.OnSwitchPlaces;
                @SwitchPlaces.canceled += instance.OnSwitchPlaces;
            }
        }
    }
    public SummonCloneActions @SummonClone => new SummonCloneActions(this);

    // PauseMenu
    private readonly InputActionMap m_PauseMenu;
    private IPauseMenuActions m_PauseMenuActionsCallbackInterface;
    private readonly InputAction m_PauseMenu_PauseGame;
    public struct PauseMenuActions
    {
        private @PlayerControls m_Wrapper;
        public PauseMenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseGame => m_Wrapper.m_PauseMenu_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void SetCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterface != null)
            {
                @PauseGame.started -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPauseGame;
                @PauseGame.performed -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPauseGame;
                @PauseGame.canceled -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnPauseGame;
            }
            m_Wrapper.m_PauseMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PauseGame.started += instance.OnPauseGame;
                @PauseGame.performed += instance.OnPauseGame;
                @PauseGame.canceled += instance.OnPauseGame;
            }
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);

    // Grapple
    private readonly InputActionMap m_Grapple;
    private IGrappleActions m_GrappleActionsCallbackInterface;
    private readonly InputAction m_Grapple_ShootHook;
    private readonly InputAction m_Grapple_CancelHook;
    public struct GrappleActions
    {
        private @PlayerControls m_Wrapper;
        public GrappleActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShootHook => m_Wrapper.m_Grapple_ShootHook;
        public InputAction @CancelHook => m_Wrapper.m_Grapple_CancelHook;
        public InputActionMap Get() { return m_Wrapper.m_Grapple; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GrappleActions set) { return set.Get(); }
        public void SetCallbacks(IGrappleActions instance)
        {
            if (m_Wrapper.m_GrappleActionsCallbackInterface != null)
            {
                @ShootHook.started -= m_Wrapper.m_GrappleActionsCallbackInterface.OnShootHook;
                @ShootHook.performed -= m_Wrapper.m_GrappleActionsCallbackInterface.OnShootHook;
                @ShootHook.canceled -= m_Wrapper.m_GrappleActionsCallbackInterface.OnShootHook;
                @CancelHook.started -= m_Wrapper.m_GrappleActionsCallbackInterface.OnCancelHook;
                @CancelHook.performed -= m_Wrapper.m_GrappleActionsCallbackInterface.OnCancelHook;
                @CancelHook.canceled -= m_Wrapper.m_GrappleActionsCallbackInterface.OnCancelHook;
            }
            m_Wrapper.m_GrappleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ShootHook.started += instance.OnShootHook;
                @ShootHook.performed += instance.OnShootHook;
                @ShootHook.canceled += instance.OnShootHook;
                @CancelHook.started += instance.OnCancelHook;
                @CancelHook.performed += instance.OnCancelHook;
                @CancelHook.canceled += instance.OnCancelHook;
            }
        }
    }
    public GrappleActions @Grapple => new GrappleActions(this);

    // Push
    private readonly InputActionMap m_Push;
    private IPushActions m_PushActionsCallbackInterface;
    private readonly InputAction m_Push_Push;
    public struct PushActions
    {
        private @PlayerControls m_Wrapper;
        public PushActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Push => m_Wrapper.m_Push_Push;
        public InputActionMap Get() { return m_Wrapper.m_Push; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PushActions set) { return set.Get(); }
        public void SetCallbacks(IPushActions instance)
        {
            if (m_Wrapper.m_PushActionsCallbackInterface != null)
            {
                @Push.started -= m_Wrapper.m_PushActionsCallbackInterface.OnPush;
                @Push.performed -= m_Wrapper.m_PushActionsCallbackInterface.OnPush;
                @Push.canceled -= m_Wrapper.m_PushActionsCallbackInterface.OnPush;
            }
            m_Wrapper.m_PushActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Push.started += instance.OnPush;
                @Push.performed += instance.OnPush;
                @Push.canceled += instance.OnPush;
            }
        }
    }
    public PushActions @Push => new PushActions(this);

    // Interaction
    private readonly InputActionMap m_Interaction;
    private IInteractionActions m_InteractionActionsCallbackInterface;
    private readonly InputAction m_Interaction_Press;
    public struct InteractionActions
    {
        private @PlayerControls m_Wrapper;
        public InteractionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_Interaction_Press;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterface != null)
            {
                @Press.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPress;
                @Press.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPress;
                @Press.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnPress;
            }
            m_Wrapper.m_InteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
            }
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_Exit;
    public struct CameraActions
    {
        private @PlayerControls m_Wrapper;
        public CameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_Camera_Exit;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @Exit.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Checkpoint
    private readonly InputActionMap m_Checkpoint;
    private ICheckpointActions m_CheckpointActionsCallbackInterface;
    private readonly InputAction m_Checkpoint_Restart;
    public struct CheckpointActions
    {
        private @PlayerControls m_Wrapper;
        public CheckpointActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_Checkpoint_Restart;
        public InputActionMap Get() { return m_Wrapper.m_Checkpoint; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheckpointActions set) { return set.Get(); }
        public void SetCallbacks(ICheckpointActions instance)
        {
            if (m_Wrapper.m_CheckpointActionsCallbackInterface != null)
            {
                @Restart.started -= m_Wrapper.m_CheckpointActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_CheckpointActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_CheckpointActionsCallbackInterface.OnRestart;
            }
            m_Wrapper.m_CheckpointActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
            }
        }
    }
    public CheckpointActions @Checkpoint => new CheckpointActions(this);

    // Cheat
    private readonly InputActionMap m_Cheat;
    private ICheatActions m_CheatActionsCallbackInterface;
    private readonly InputAction m_Cheat_Toggle;
    private readonly InputAction m_Cheat_History;
    public struct CheatActions
    {
        private @PlayerControls m_Wrapper;
        public CheatActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toggle => m_Wrapper.m_Cheat_Toggle;
        public InputAction @History => m_Wrapper.m_Cheat_History;
        public InputActionMap Get() { return m_Wrapper.m_Cheat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatActions set) { return set.Get(); }
        public void SetCallbacks(ICheatActions instance)
        {
            if (m_Wrapper.m_CheatActionsCallbackInterface != null)
            {
                @Toggle.started -= m_Wrapper.m_CheatActionsCallbackInterface.OnToggle;
                @Toggle.performed -= m_Wrapper.m_CheatActionsCallbackInterface.OnToggle;
                @Toggle.canceled -= m_Wrapper.m_CheatActionsCallbackInterface.OnToggle;
                @History.started -= m_Wrapper.m_CheatActionsCallbackInterface.OnHistory;
                @History.performed -= m_Wrapper.m_CheatActionsCallbackInterface.OnHistory;
                @History.canceled -= m_Wrapper.m_CheatActionsCallbackInterface.OnHistory;
            }
            m_Wrapper.m_CheatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Toggle.started += instance.OnToggle;
                @Toggle.performed += instance.OnToggle;
                @Toggle.canceled += instance.OnToggle;
                @History.started += instance.OnHistory;
                @History.performed += instance.OnHistory;
                @History.canceled += instance.OnHistory;
            }
        }
    }
    public CheatActions @Cheat => new CheatActions(this);

    // Cutscene
    private readonly InputActionMap m_Cutscene;
    private ICutsceneActions m_CutsceneActionsCallbackInterface;
    private readonly InputAction m_Cutscene_SkipCutscene;
    public struct CutsceneActions
    {
        private @PlayerControls m_Wrapper;
        public CutsceneActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkipCutscene => m_Wrapper.m_Cutscene_SkipCutscene;
        public InputActionMap Get() { return m_Wrapper.m_Cutscene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CutsceneActions set) { return set.Get(); }
        public void SetCallbacks(ICutsceneActions instance)
        {
            if (m_Wrapper.m_CutsceneActionsCallbackInterface != null)
            {
                @SkipCutscene.started -= m_Wrapper.m_CutsceneActionsCallbackInterface.OnSkipCutscene;
                @SkipCutscene.performed -= m_Wrapper.m_CutsceneActionsCallbackInterface.OnSkipCutscene;
                @SkipCutscene.canceled -= m_Wrapper.m_CutsceneActionsCallbackInterface.OnSkipCutscene;
            }
            m_Wrapper.m_CutsceneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SkipCutscene.started += instance.OnSkipCutscene;
                @SkipCutscene.performed += instance.OnSkipCutscene;
                @SkipCutscene.canceled += instance.OnSkipCutscene;
            }
        }
    }
    public CutsceneActions @Cutscene => new CutsceneActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Move;
    private readonly InputAction m_Menu_AltMove;
    private readonly InputAction m_Menu_Press;
    private readonly InputAction m_Menu_Back;
    public struct MenuActions
    {
        private @PlayerControls m_Wrapper;
        public MenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Menu_Move;
        public InputAction @AltMove => m_Wrapper.m_Menu_AltMove;
        public InputAction @Press => m_Wrapper.m_Menu_Press;
        public InputAction @Back => m_Wrapper.m_Menu_Back;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnMove;
                @AltMove.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnAltMove;
                @AltMove.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnAltMove;
                @AltMove.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnAltMove;
                @Press.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnPress;
                @Press.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnPress;
                @Press.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnPress;
                @Back.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnBack;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @AltMove.started += instance.OnAltMove;
                @AltMove.performed += instance.OnAltMove;
                @AltMove.canceled += instance.OnAltMove;
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // Scenes
    private readonly InputActionMap m_Scenes;
    private IScenesActions m_ScenesActionsCallbackInterface;
    private readonly InputAction m_Scenes_DenialScene;
    private readonly InputAction m_Scenes_HubScene;
    private readonly InputAction m_Scenes_DepressionScene;
    private readonly InputAction m_Scenes_BargainingScene;
    private readonly InputAction m_Scenes_AngerScene;
    private readonly InputAction m_Scenes_MuseumScene;
    private readonly InputAction m_Scenes_AcceptanceScene;
    private readonly InputAction m_Scenes_CameraScene;
    private readonly InputAction m_Scenes_CloseGame;
    public struct ScenesActions
    {
        private @PlayerControls m_Wrapper;
        public ScenesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DenialScene => m_Wrapper.m_Scenes_DenialScene;
        public InputAction @HubScene => m_Wrapper.m_Scenes_HubScene;
        public InputAction @DepressionScene => m_Wrapper.m_Scenes_DepressionScene;
        public InputAction @BargainingScene => m_Wrapper.m_Scenes_BargainingScene;
        public InputAction @AngerScene => m_Wrapper.m_Scenes_AngerScene;
        public InputAction @MuseumScene => m_Wrapper.m_Scenes_MuseumScene;
        public InputAction @AcceptanceScene => m_Wrapper.m_Scenes_AcceptanceScene;
        public InputAction @CameraScene => m_Wrapper.m_Scenes_CameraScene;
        public InputAction @CloseGame => m_Wrapper.m_Scenes_CloseGame;
        public InputActionMap Get() { return m_Wrapper.m_Scenes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScenesActions set) { return set.Get(); }
        public void SetCallbacks(IScenesActions instance)
        {
            if (m_Wrapper.m_ScenesActionsCallbackInterface != null)
            {
                @DenialScene.started -= m_Wrapper.m_ScenesActionsCallbackInterface.OnDenialScene;
                @DenialScene.performed -= m_Wrapper.m_ScenesActionsCallbackInterface.OnDenialScene;
                @DenialScene.canceled -= m_Wrapper.m_ScenesActionsCallbackInterface.OnDenialScene;
                @HubScene.started -= m_Wrapper.m_ScenesActionsCallbackInterface.OnHubScene;
                @HubScene.performed -= m_Wrapper.m_ScenesActionsCallbackInterface.OnHubScene;
                @HubScene.canceled -= m_Wrapper.m_ScenesActionsCallbackInterface.OnHubScene;
                @DepressionScene.started -= m_Wrapper.m_ScenesActionsCallbackInterface.OnDepressionScene;
                @DepressionScene.performed -= m_Wrapper.m_ScenesActionsCallbackInterface.OnDepressionScene;
                @DepressionScene.canceled -= m_Wrapper.m_ScenesActionsCallbackInterface.OnDepressionScene;
                @BargainingScene.started -= m_Wrapper.m_ScenesActionsCallbackInterface.OnBargainingScene;
                @BargainingScene.performed -= m_Wrapper.m_ScenesActionsCallbackInterface.OnBargainingScene;
                @BargainingScene.canceled -= m_Wrapper.m_ScenesActionsCallbackInterface.OnBargainingScene;
                @AngerScene.started -= m_Wrapper.m_ScenesActionsCallbackInterface.OnAngerScene;
                @AngerScene.performed -= m_Wrapper.m_ScenesActionsCallbackInterface.OnAngerScene;
                @AngerScene.canceled -= m_Wrapper.m_ScenesActionsCallbackInterface.OnAngerScene;
                @MuseumScene.started -= m_Wrapper.m_ScenesActionsCallbackInterface.OnMuseumScene;
                @MuseumScene.performed -= m_Wrapper.m_ScenesActionsCallbackInterface.OnMuseumScene;
                @MuseumScene.canceled -= m_Wrapper.m_ScenesActionsCallbackInterface.OnMuseumScene;
                @AcceptanceScene.started -= m_Wrapper.m_ScenesActionsCallbackInterface.OnAcceptanceScene;
                @AcceptanceScene.performed -= m_Wrapper.m_ScenesActionsCallbackInterface.OnAcceptanceScene;
                @AcceptanceScene.canceled -= m_Wrapper.m_ScenesActionsCallbackInterface.OnAcceptanceScene;
                @CameraScene.started -= m_Wrapper.m_ScenesActionsCallbackInterface.OnCameraScene;
                @CameraScene.performed -= m_Wrapper.m_ScenesActionsCallbackInterface.OnCameraScene;
                @CameraScene.canceled -= m_Wrapper.m_ScenesActionsCallbackInterface.OnCameraScene;
                @CloseGame.started -= m_Wrapper.m_ScenesActionsCallbackInterface.OnCloseGame;
                @CloseGame.performed -= m_Wrapper.m_ScenesActionsCallbackInterface.OnCloseGame;
                @CloseGame.canceled -= m_Wrapper.m_ScenesActionsCallbackInterface.OnCloseGame;
            }
            m_Wrapper.m_ScenesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DenialScene.started += instance.OnDenialScene;
                @DenialScene.performed += instance.OnDenialScene;
                @DenialScene.canceled += instance.OnDenialScene;
                @HubScene.started += instance.OnHubScene;
                @HubScene.performed += instance.OnHubScene;
                @HubScene.canceled += instance.OnHubScene;
                @DepressionScene.started += instance.OnDepressionScene;
                @DepressionScene.performed += instance.OnDepressionScene;
                @DepressionScene.canceled += instance.OnDepressionScene;
                @BargainingScene.started += instance.OnBargainingScene;
                @BargainingScene.performed += instance.OnBargainingScene;
                @BargainingScene.canceled += instance.OnBargainingScene;
                @AngerScene.started += instance.OnAngerScene;
                @AngerScene.performed += instance.OnAngerScene;
                @AngerScene.canceled += instance.OnAngerScene;
                @MuseumScene.started += instance.OnMuseumScene;
                @MuseumScene.performed += instance.OnMuseumScene;
                @MuseumScene.canceled += instance.OnMuseumScene;
                @AcceptanceScene.started += instance.OnAcceptanceScene;
                @AcceptanceScene.performed += instance.OnAcceptanceScene;
                @AcceptanceScene.canceled += instance.OnAcceptanceScene;
                @CameraScene.started += instance.OnCameraScene;
                @CameraScene.performed += instance.OnCameraScene;
                @CameraScene.canceled += instance.OnCameraScene;
                @CloseGame.started += instance.OnCloseGame;
                @CloseGame.performed += instance.OnCloseGame;
                @CloseGame.canceled += instance.OnCloseGame;
            }
        }
    }
    public ScenesActions @Scenes => new ScenesActions(this);

    // Ghost
    private readonly InputActionMap m_Ghost;
    private IGhostActions m_GhostActionsCallbackInterface;
    private readonly InputAction m_Ghost_Move;
    private readonly InputAction m_Ghost_Up;
    private readonly InputAction m_Ghost_Down;
    private readonly InputAction m_Ghost_Camera;
    private readonly InputAction m_Ghost_Sprint;
    private readonly InputAction m_Ghost_Sensitivity;
    public struct GhostActions
    {
        private @PlayerControls m_Wrapper;
        public GhostActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Ghost_Move;
        public InputAction @Up => m_Wrapper.m_Ghost_Up;
        public InputAction @Down => m_Wrapper.m_Ghost_Down;
        public InputAction @Camera => m_Wrapper.m_Ghost_Camera;
        public InputAction @Sprint => m_Wrapper.m_Ghost_Sprint;
        public InputAction @Sensitivity => m_Wrapper.m_Ghost_Sensitivity;
        public InputActionMap Get() { return m_Wrapper.m_Ghost; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GhostActions set) { return set.Get(); }
        public void SetCallbacks(IGhostActions instance)
        {
            if (m_Wrapper.m_GhostActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GhostActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GhostActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GhostActionsCallbackInterface.OnMove;
                @Up.started -= m_Wrapper.m_GhostActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_GhostActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_GhostActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_GhostActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_GhostActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_GhostActionsCallbackInterface.OnDown;
                @Camera.started -= m_Wrapper.m_GhostActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_GhostActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_GhostActionsCallbackInterface.OnCamera;
                @Sprint.started -= m_Wrapper.m_GhostActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_GhostActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_GhostActionsCallbackInterface.OnSprint;
                @Sensitivity.started -= m_Wrapper.m_GhostActionsCallbackInterface.OnSensitivity;
                @Sensitivity.performed -= m_Wrapper.m_GhostActionsCallbackInterface.OnSensitivity;
                @Sensitivity.canceled -= m_Wrapper.m_GhostActionsCallbackInterface.OnSensitivity;
            }
            m_Wrapper.m_GhostActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Sensitivity.started += instance.OnSensitivity;
                @Sensitivity.performed += instance.OnSensitivity;
                @Sensitivity.canceled += instance.OnSensitivity;
            }
        }
    }
    public GhostActions @Ghost => new GhostActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCamMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface ISummonCloneActions
    {
        void OnSummonAClone(InputAction.CallbackContext context);
        void OnExitClone(InputAction.CallbackContext context);
        void OnSwitchPlaces(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnPauseGame(InputAction.CallbackContext context);
    }
    public interface IGrappleActions
    {
        void OnShootHook(InputAction.CallbackContext context);
        void OnCancelHook(InputAction.CallbackContext context);
    }
    public interface IPushActions
    {
        void OnPush(InputAction.CallbackContext context);
    }
    public interface IInteractionActions
    {
        void OnPress(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnExit(InputAction.CallbackContext context);
    }
    public interface ICheckpointActions
    {
        void OnRestart(InputAction.CallbackContext context);
    }
    public interface ICheatActions
    {
        void OnToggle(InputAction.CallbackContext context);
        void OnHistory(InputAction.CallbackContext context);
    }
    public interface ICutsceneActions
    {
        void OnSkipCutscene(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAltMove(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IScenesActions
    {
        void OnDenialScene(InputAction.CallbackContext context);
        void OnHubScene(InputAction.CallbackContext context);
        void OnDepressionScene(InputAction.CallbackContext context);
        void OnBargainingScene(InputAction.CallbackContext context);
        void OnAngerScene(InputAction.CallbackContext context);
        void OnMuseumScene(InputAction.CallbackContext context);
        void OnAcceptanceScene(InputAction.CallbackContext context);
        void OnCameraScene(InputAction.CallbackContext context);
        void OnCloseGame(InputAction.CallbackContext context);
    }
    public interface IGhostActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnSensitivity(InputAction.CallbackContext context);
    }
}
